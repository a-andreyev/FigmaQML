name: CMake Build Matrix

on:
  push:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest MSVC"
            artifact: "FigmaQML-win.tar.xz"
            os: windows-latest
            cc: "cl"
            cxx: "cl"
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            generators: "Visual Studio 17 2022"
            arch: "win64_msvc2019_64"
            host: "windows"
            libs: 'qt5compat qtshadertools'
        #  - name: "Windows Latest MinGW"
        #    artifact: "FigmaQML-Windows-MinGW.tar.xz"
        #    os: windows-latest
        #    cc: "gcc"
        #    cxx: "g++"
        #    generators: "Ninja"
        #    arch: 'win64_mingw'
        #    host: "windows"
        #    libs: 'qt5compat qtshadertools'
          - name: "Ubuntu Latest GCC"
            artifact: "FigmaQML-nix.AppImage.xz"
            os: ubuntu-latest
            cc: "gcc"
            cxx: "g++"
            generators: "Ninja"
            arch: 'gcc_64'
            host: "linux"
            libs: 'qt5compat qtserialport'
          - name: "macOS Latest Clang"
            artifact: "FigmaQML-mac.app.tar.xz"
            os: macos-latest
            cc: "clang"
            cxx: "clang++"
            generators: "Ninja"
            arch: 'clang_64'
            host: "mac"
            libs: 'qt5compat'
          - name: "Wasm"
            artifact: "FigmaQML-wasm.tar.gz"
            os: ubuntu-latest
            cc: "em"
            cxx: "em++"
            generators: "Ninja"
            arch: 'wasm_singlethread'
            host: "linux"
            libs: 'qt5compat'

    steps:
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install cmake ninja
          ninja --version
          cmake --version

      - name: Install dependencies for wasm
        if: startsWith(matrix.config.arch, 'wasm')
        uses: mymindstorm/setup-emsdk@v14
        with:
            version: 3.1.37

        #- name: Install Qt desktop for wasm
        #  if: startsWith(matrix.config.arch, 'wasm')
        #  uses: jurplel/install-qt-action@v3.3.0
        #  with:
        #      aqtversion: '>=3.1.*'
        #      version: '6.6.2'
        #      host: linux
        #    target: 'desktop'
        #    arch: gcc_64
        #    install-deps: 'true'
        #    tools: 'tools_ninja tools_cmake'

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '>=3.1.7'
          version: '6.6.2'
          host: ${{ matrix.config.host }}
          target: 'desktop'
          arch:  ${{ matrix.config.arch }}
          install-deps: 'true'
          modules: ${{ matrix.config.libs }}
          tools: 'tools_ninja tools_cmake'


        #- name: What is this crap?
        #if: startsWith(matrix.config.arch, 'wasm')
        #shell: bash
        #run: |
        #    chmod a+x ${{ github.workspace }}/../Qt/6.6.2/wasm_singlethread/bin/qt-cmake
        #    ${{ github.workspace }}/../Qt/6.6.2/wasm_singlethread/bin/qt-cmake -version

      - name: Quack
        if: startsWith(matrix.config.arch, 'wasm')
        run: |
            # ls -laR ${{ github.workspace }}/..
            emcc -v
            which emcc
            find ${{ github.workspace }}/../.. -name emscripten
            find ${{ github.workspace }}/.. -name wasm_singlethread

      - name: Checkout
        uses: actions/checkout@v3

      - name: Make WASM
        if: startsWith(matrix.config.arch, 'wasm')
        shell: bash
        run: |
            ./wasm_build.sh "${{ github.workspace }}/../Qt/6.6.2/${{ matrix.config.arch }}"
            exit $!

      - name: Configure
        if: '!startsWith(matrix.config.arch, ''wasm'')'
        shell: cmake -P {0}
        run: |
            file(TO_CMAKE_PATH "${{ github.workspace }}" WS_PATH)
            set(ENV{Qt6_DIR} "${WS_PATH}/../Qt/6.6.2/${{ matrix.config.arch }}")
            set(ENV{CC} ${{ matrix.config.cc }})
            set(ENV{CXX} ${{ matrix.config.cxx }})

            message("CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
            message("CMAKE_CURRENT_LIST_DIR ${CMAKE_CURRENT_LIST_DIR}")
            message("Qt6_DIR $ENV{Qt6_DIR}")
            message("QT_ROOT_DIR $ENV{QT_ROOT_DIR}")

            if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
                execute_process(
                    COMMAND "${{ matrix.config.environment_script }}" && set
                    OUTPUT_FILE environment_script_output.txt
                )
                file(STRINGS environment_script_output.txt output_lines)
                foreach(line IN LISTS output_lines)
                    if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                        set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
                    endif()
                endforeach()
            endif()

            execute_process(
                    COMMAND cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCI_ACTIONS=ON -G Ninja -DACTIONS=TRUE
                        RESULT_VARIABLE result
                    )

            if (NOT result EQUAL 0)
                message(FATAL_ERROR "Bad exit status ${result}")
            endif()

      - name: Build
        if: '!startsWith(matrix.config.arch, ''wasm'')'
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          execute_process(
            COMMAND cmake --build build --config Release
            RESULT_VARIABLE result
            OUTPUT_VARIABLE build_out
            ERROR_VARIABLE build_out
          )

          message("build out: ${build_out}")

          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: List this folder
        shell: bash
        run: pwd && ls -R

      - name: QtDeploy (U)
        if: startsWith(matrix.config.arch, 'gcc_64')
        working-directory: build
        run: |
            pwd & ls -la
            sudo apt-get install fuse libfuse2
            wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
            wget --no-verbose "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
            chmod +x linuxdeploy*.AppImage
            export EXTRA_QT_PLUGINS=svg
            ./linuxdeploy-x86_64.AppImage --executable=./FigmaQML  --appdir=FigmaQML.AppImage --verbosity=3
            cmake -E tar cJvf ../${{ matrix.config.artifact }} FigmaQML.AppImage

      - name: QtDeploy (A)
        if: startsWith(matrix.config.arch, 'wasm')
        working-directory: build
        run: |
          pwd & ls -la
          mkdir release
          cp favicon.ico release
          cp FigmaQML.html release
          cp *.js release
          cp qtlogo.svg release
          cp *.wasm release
          cmake -E tar czvf ../${{ matrix.config.artifact }} release

      - name: QtDeploy (M)
        if: startsWith(matrix.config.os, 'macos')
        working-directory: build
        run: |
            $Qt6_DIR/bin/macdeployqt FigmaQML.app -qmldir=../qml
            cmake -E tar cJvf ../${{ matrix.config.artifact }} FigmaQML.app

          #- name: QtDeploy (W)
          #  if: startsWith(matrix.config.os, 'windows')
          #  working-directory: build
          #  run: |
          #      New-Item -ItemType Directory -Path FigmaQml
          #      Copy-Item "FigmaQML.exe" -Destination "FigmaQml"
          #      $qt6Dir = $Env:Qt6_DIR
          #      $windeployqtPath = Join-Path -Path $qt6Dir -ChildPath "bin\windeployqt.exe"
          #      & $windeployqtPath --qmldir ../qml --compiler-runtime "FigmaQml\FigmaQML.exe"
          #      copy ..\OpenSSL_win\*.dll FigmaQml
          #      cmake -E tar cJvf ../${{ matrix.config.artifact }} FigmaQml
          #      Get-ChildItem -Force

      - name: QtDeploy (W)
        if: startsWith(matrix.config.os, 'windows')
        working-directory: build
        shell: bash
        run: |
            mkdir FigmaQml
            cp FigmaQML.exe FigmaQml/
            $Qt6_DIR/bin/windeployqt.exe --qmldir ../qml --compiler-runtime "FigmaQml/FigmaQML.exe"
            cp ../OpenSSL_win/*.dll FigmaQml/
            cmake -E tar cJvf ../${{ matrix.config.artifact }} FigmaQml

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Windows Latest MSVC"
            artifact: "FigmaQML-win.tar.xz"
            os: ubuntu-latest
          #- name: "Windows Latest MinGW"
          #  artifact: "Gempyre-Windows-MinGW.tar.xz"
          #  os: ubuntu-latest
          - name: "Ubuntu Latest GCC"
            artifact: "FigmaQML-nix.AppImage.xz"
            os: ubuntu-latest
          - name: "macOS Latest Clang"
            artifact: "FigmaQML-mac.app.tar.xz"
            os: ubuntu-latest
          - name: "Wasm"
            artifact: "FigmaQML-wasm.tar.gz"
            os: ubuntu-latest
    needs: release

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: ${{ matrix.config.artifact }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.config.artifact }}

      - name: Publish
        if: startsWith(matrix.config.artifact, 'FigmaQML-wasm')
        uses: actions/deploy-pages@v4
        with:
            artifact_name: ${{ matrix.config.artifact }}
