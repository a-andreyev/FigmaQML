name: CMake Build Matrix
on: [push]
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "FigmaQML-Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
            arch: "win64_msvc2019_64"
          }
        - {
            name: "Windows Latest MinGW", artifact: "FigmaQML-Windows-MinGW.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "gcc", cxx: "g++",
            generators: "Ninja"
            arch: 'win64_mingw'
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "FigmaQML-Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc", cxx: "g++",
            generators: "Ninja"
            arch: 'gcc_64'
          }
        - {
            name: "macOS Latest Clang", artifact: "FigmaQML-macOS.tar.xz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++",
            generators: "Ninja"
            arch: 'clang_64'
          }
        - {
          name: "Wasm", artifact: "FigmaQML-wasm.tar.xz",
          os: ubuntu-latest,
          build_type: "Release", cc: "clang", cxx: "clang++",
          generators: "Ninja"
          arch: 'wasm_singlethread'
          }
steps:
    - name: Install Qt
    uses: jurplel/install-qt-action@v3.3.0
    with:
        version: '6.6.2'
        host: matrix.config.os
        target: 'desktop'
        arch:  matrix.config.os.arch
        dir: '${{ github.workspace }}/build/'
        install-deps: 'true'
        modules: 'qtquick qtnetwork qtwidgets qtcore5compat qtserialport'

    - name: Configure
        shell: cmake -P {0}
        run: |
            set(ENV{CC} ${{ matrix.config.cc }})
            set(ENV{CXX} ${{ matrix.config.cxx }})

            message("Currenly: ${CMAKE_CURRENT_SOURCE_DIR}, ${CMAKE_CURRENT_LIST_DIR}")

            # is this really executed?
            if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
              execute_process(
                COMMAND "${{ matrix.config.environment_script }}" && set
                OUTPUT_FILE environment_script_output.txt
              )
              file(STRINGS environment_script_output.txt output_lines)
              foreach(line IN LISTS output_lines)
                if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                  set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
                endif()
              endforeach()

            endif()

            execute_process(
                    COMMAND cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCI_ACTIONS=ON -G Ninja -DACTIONS=TRUE
                    RESULT_VARIABLE result
                    )

            if (NOT result EQUAL 0)
              message(FATAL_ERROR "Bad exit status")
            endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
          OUTPUT_VARIABLE build_out
          ERROR_VARIABLE build_out
        )

        message("build out: ${build_out}")

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Pack
        working-directory: install_dir
        run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      uses: ncipollo/release-action@v1.12.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        allowUpdates: true


    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

publish:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Gempyre-Windows-MSVC.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Windows Latest MinGW", artifact: "Gempyre-Windows-MinGW.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Gempyre-Linux.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest Clang", artifact: "Gempyre-macOS.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Wasm", artifact: "FigmaQML-wasm.tar.xz",
            os: ubuntu-latest
          }
    needs: release

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: ${{ matrix.config.artifact }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.config.artifact }}
